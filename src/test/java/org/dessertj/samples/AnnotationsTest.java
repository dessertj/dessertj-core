package org.dessertj.samples;

/*-
 * #%L
 * DessertJ Dependency Assertion Library for Java
 * %%
 * Copyright (C) 2017 - 2024 Hans Jörg Heßmann
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import org.dessertj.classfile.ClassFile;
import org.dessertj.samples.annotations.AnnotatedObject;
import org.dessertj.samples.annotations.InvisibleAnnotation;
import org.dessertj.samples.annotations.InvisibleArg;
import org.dessertj.samples.annotations.InvisibleNestedAnnotation;
import org.dessertj.samples.annotations.MetaAnnotatedObject;
import org.dessertj.samples.annotations.SampleAnnotation;
import org.dessertj.samples.annotations.SpecialArg;
import org.dessertj.samples.annotations.SpecialArgSample;
import org.dessertj.samples.annotations.Val3Annotation;
import org.junit.Test;

import java.io.IOException;
import java.util.Set;

import static org.fest.assertions.Assertions.assertThat;

/**
 * This test has been generated by TestGeneratorTool.
 */
public class AnnotationsTest {

    @Test
    public void testAnnotatedObject() throws IOException {
        ClassFile cf = new ClassFile(AnnotatedObject.class);
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "org.dessertj.samples.annotations.InvisibleAnnotation",
                "org.dessertj.samples.annotations.InvisibleArg",
                "org.dessertj.samples.annotations.SampleAnnotation",
                "org.dessertj.samples.enums.SomeEnum",
                "java.io.PrintStream",
                "java.lang.Object",
                "java.lang.String",
                "java.lang.StringBuilder",
                "java.lang.System");
    }

    @Test
    public void testInvisibleAnnotation() throws IOException {
        ClassFile cf = new ClassFile(InvisibleAnnotation.class);
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "org.dessertj.samples.annotations.InvisibleNestedAnnotation",
                "java.lang.Object",
                "java.lang.String",
                "java.lang.annotation.Annotation",
                "java.lang.annotation.Documented",
                "java.lang.annotation.ElementType",
                "java.lang.annotation.Inherited",
                "java.lang.annotation.Retention",
                "java.lang.annotation.RetentionPolicy",
                "java.lang.annotation.Target");
    }

    @Test
    public void testInvisibleArg() throws IOException {
        ClassFile cf = new ClassFile(InvisibleArg.class);
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "java.lang.Object",
                "java.lang.annotation.Annotation",
                "java.lang.annotation.ElementType",
                "java.lang.annotation.Retention",
                "java.lang.annotation.RetentionPolicy",
                "java.lang.annotation.Target");
    }

    @Test
    public void testInvisibleNestedAnnotation() throws IOException {
        ClassFile cf = new ClassFile(InvisibleNestedAnnotation.class);
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "java.lang.Object",
                "java.lang.annotation.Annotation",
                "java.lang.annotation.Documented",
                "java.lang.annotation.ElementType",
                "java.lang.annotation.Retention",
                "java.lang.annotation.RetentionPolicy",
                "java.lang.annotation.Target");
    }

    @Test
    public void testMetaAnnotatedObject() throws IOException {
        ClassFile cf = new ClassFile(MetaAnnotatedObject.class);
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "org.dessertj.samples.annotations.Val3Annotation",
                "java.lang.Object");
    }

    @Test
    public void testSampleAnnotation() throws IOException {
        ClassFile cf = new ClassFile(SampleAnnotation.class);
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "org.dessertj.samples.enums.SomeEnum",
                "java.lang.Object",
                "java.lang.annotation.Annotation",
                "java.lang.annotation.Documented",
                "java.lang.annotation.ElementType",
                "java.lang.annotation.Inherited",
                "java.lang.annotation.Retention",
                "java.lang.annotation.RetentionPolicy",
                "java.lang.annotation.Target");
    }

    @Test
    public void testSpecialArg() throws IOException {
        ClassFile cf = new ClassFile(SpecialArg.class);
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "java.lang.Object",
                "java.lang.annotation.Annotation",
                "java.lang.annotation.ElementType",
                "java.lang.annotation.Retention",
                "java.lang.annotation.RetentionPolicy",
                "java.lang.annotation.Target");
    }

    @Test
    public void testSpecialArgSample() throws IOException {
        ClassFile cf = new ClassFile(SpecialArgSample.class);
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "org.dessertj.samples.annotations.SpecialArg",
                "java.io.PrintStream",
                "java.lang.Object",
                "java.lang.String",
                "java.lang.StringBuilder",
                "java.lang.System");
    }

    @Test
    public void testVal3Annotation() throws IOException {
        ClassFile cf = new ClassFile(Val3Annotation.class);
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "org.dessertj.samples.annotations.SampleAnnotation",
                "org.dessertj.samples.enums.SomeEnum",
                "java.lang.Object",
                "java.lang.annotation.Annotation",
                "java.lang.annotation.ElementType",
                "java.lang.annotation.Retention",
                "java.lang.annotation.RetentionPolicy",
                "java.lang.annotation.Target");
    }

}

package de.spricom.dessert.samples;

/*-
 * #%L
 * Dessert Dependency Assertion Library for Java
 * %%
 * Copyright (C) 2017 - 2022 Hans Jörg Heßmann
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import de.spricom.dessert.classfile.ClassFile;
import org.junit.Ignore;
import org.junit.Test;

import java.io.*;
import java.util.Set;
import java.util.TreeSet;

@Ignore
public class TestGeneratorTool {

    private File testSrcDir = new File("src/test/java");
    private File targetDir = new File(testSrcDir,
            TestGeneratorTool.class.getPackage().getName().replace('.', '/'));
    private File testClassesDir = new File("target/test-classes");
    private File sampleClassesDir = new File(testClassesDir, "de/spricom/dessert/samples");

    @Test
    public void generate() throws IOException {
        for (File file : sampleClassesDir.listFiles()) {
            if (file.isDirectory()) {
                generateTest(file);
            }
        }

    }

    private void generateTest(File dir) throws IOException {
        String testname = capitalize(dir.getName()) + "Test";

        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);

        pw.printf("package %s;%n", getClass().getPackage().getName());
        pw.println();
        pw.println("import de.spricom.dessert.classfile.ClassFile;");
        pw.printf("import de.spricom.dessert.samples.%s.*;%n", dir.getName());
        pw.println("import org.junit.Test;");
        pw.println();
        pw.println("import java.io.IOException;");
        pw.println("import java.util.Set;");
        pw.println();
        pw.println("import static org.fest.assertions.Assertions.assertThat;");
        pw.println();
        pw.println("/**");
        pw.printf(" * This test has been generated by %s.%n", this.getClass().getSimpleName());
        pw.println(" */");
        pw.printf("public class %s {%n", testname);
        pw.println();

        for (File file : dir.listFiles()) {
            generateTestMethod(pw, file);
        }

        pw.println("}");

        pw.flush();
        File testFile = new File(targetDir, testname + ".java");
        Writer wr = null;
        try {
            wr = new OutputStreamWriter(new FileOutputStream(testFile), "UTF-8");
            wr.write(sw.toString());
        } finally {
            if (wr != null) {
                wr.close();
            }
        }
    }

    private void generateTestMethod(PrintWriter pw, File file) throws IOException {
        String classname = file.getName().substring(0, file.getName().length() - ".class".length());
        ClassFile cf = new ClassFile(new FileInputStream(file));
        Set<String> dependentClasses = new TreeSet<String>(cf.getDependentClasses());

        pw.println("    @Test");
        pw.printf("    public void test%s() throws IOException {%n", classname.replace('$', '_'));
        int baseIndex = classname.indexOf('$');
        if (baseIndex == -1) {
            pw.printf("        ClassFile cf = new ClassFile(%s.class);%n", classname);
        } else {
            pw.printf("        ClassFile cf = new ClassFile(%s.class.getResourceAsStream(\"%s.class\"));%n",
                    classname.substring(0, baseIndex), classname);
        }
        pw.println("        Set<String> dependentClasses = cf.getDependentClasses();");
        pw.println("        assertThat(dependentClasses).containsOnly(");
        boolean first = true;
        for (String dependentClass : dependentClasses) {
            if (first) {
                first = false;
            } else {
                pw.println(",");
            }
            pw.printf("                \"%s\"", dependentClass);
        }
        pw.println(");");
        pw.println("    }");
        pw.println();
    }

    private String capitalize(String name) {
        return Character.toUpperCase(name.charAt(0)) + name.substring(1);
    }

    @Test
    public void dump() throws IOException {
        File file = new File(targetDir, "AnnotationsTest.java");
        BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), "UTF-8"));
        String line;
        while ((line = br.readLine()) != null) {
            if (line.isEmpty()) {
                System.out.println("pw.println();");
            } else {
                System.out.printf("pw.println(\"%s\");%n", line);
            }
        }
    }
}

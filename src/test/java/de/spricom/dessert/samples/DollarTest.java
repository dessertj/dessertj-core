package de.spricom.dessert.samples;

/*-
 * #%L
 * Dessert Dependency Assertion Library for Java
 * %%
 * Copyright (C) 2017 - 2023 Hans Jörg Heßmann
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */

import de.spricom.dessert.classfile.ClassFile;
import de.spricom.dessert.samples.dollar.Dollar;
import org.junit.Test;

import java.io.IOException;
import java.util.Set;

import static org.fest.assertions.Assertions.assertThat;

/**
 * This test has been generated by TestGeneratorTool.
 */
public class DollarTest {

    @Test
    public void testDollar_A_B_1_Nest_2_Nest_Nest() throws IOException {
        ClassFile cf = new ClassFile(Dollar.class.getResourceAsStream("Dollar$A$B$1$Nest$2$Nest$Nest.class"));
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "de.spricom.dessert.samples.dollar.Dollar$A$B$1",
                "de.spricom.dessert.samples.dollar.Dollar$A$B$1$Nest$2",
                "java.lang.Object");
    }

    @Test
    public void testDollar_A_B_1_Nest_2() throws IOException {
        ClassFile cf = new ClassFile(Dollar.class.getResourceAsStream("Dollar$A$B$1$Nest$2.class"));
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "de.spricom.dessert.samples.dollar.Dollar$A$B$1",
                "de.spricom.dessert.samples.dollar.Dollar$A$B$1$Nest$2$Nest$Nest",
                "java.lang.Object");
    }

    @Test
    public void testDollar_A_B_1() throws IOException {
        ClassFile cf = new ClassFile(Dollar.class.getResourceAsStream("Dollar$A$B$1.class"));
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "de.spricom.dessert.samples.dollar.Dollar$A$B$1$Nest$2",
                "java.lang.Object");
    }

    @Test
    public void testDollar_A_B_2() throws IOException {
        ClassFile cf = new ClassFile(Dollar.class.getResourceAsStream("Dollar$A$B$2.class"));
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "de.spricom.dessert.samples.dollar.Dollar",
                "de.spricom.dessert.samples.dollar.Dollar$A",
                "de.spricom.dessert.samples.dollar.Dollar$A$B",
                "java.lang.Integer",
                "java.lang.Object",
                "java.util.Comparator");
    }

    @Test
    public void testDollar_A_B() throws IOException {
        ClassFile cf = new ClassFile(Dollar.class.getResourceAsStream("Dollar$A$B.class"));
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "de.spricom.dessert.samples.dollar.Dollar",
                "de.spricom.dessert.samples.dollar.Dollar$A",
                "de.spricom.dessert.samples.dollar.Dollar$A$B$2",
                "java.lang.Integer",
                "java.lang.Object",
                "java.util.Comparator");
    }

    @Test
    public void testDollar_A() throws IOException {
        ClassFile cf = new ClassFile(Dollar.class.getResourceAsStream("Dollar$A.class"));
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "de.spricom.dessert.samples.dollar.Dollar",
                "de.spricom.dessert.samples.dollar.Dollar$A$B",
                "java.lang.Object");
    }

    @Test
    public void testDollar() throws IOException {
        ClassFile cf = new ClassFile(Dollar.class);
        Set<String> dependentClasses = cf.getDependentClasses();
        assertThat(dependentClasses).containsOnly(
                "de.spricom.dessert.samples.dollar.Dollar$A",
                "java.lang.Object");
    }

}
